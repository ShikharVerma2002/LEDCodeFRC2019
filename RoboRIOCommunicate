// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Wire.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN            6

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      120

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
byte state = 0;
int range = 10;
int goffset = 0;
int roffset = range * 2;
int boffset = roffset + range * 2;
int gOffset = goffset;
int rOffset = roffset;
int bOffset = boffset;

void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
#if defined (__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
#endif
  // End of trinket special code

  Serial.begin(9600);
  Wire.begin(4);
  Wire.onReceive(receiveEvent);

  pixels.begin(); // This initializes the NeoPixel library.
}



void loop() {

  while (true) {
    if (state < 0x7f) {
      chase();
    } else {
      clearLeds();
    }
    //        switch(state){
    //          case 0 //hatchGripperOn:
    //            clearLeds();
    //            chase();
    //            break;
    //          case 1:
    //            clearLeds();
    //            strips_loop();
    //            break;
    //          default:
    //            clearLeds();
    //            break;
    //        }
    delay(1000); // Delay for a period of time (in milliseconds).
  }

}

void receiveEvent(int howMany) {
  byte thisState = 0;
  while (Wire.available()) {
    thisState = Wire.read();
  }
  Serial.print("old data ");
  Serial.print(state);
  Serial.print(" new data ");
  Serial.println(thisState);
  state = thisState;
}

void chase() {
  // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
  if (gOffset < range)
  {
    pixels.setPixelColor(NUMPIXELS - (range - gOffset), pixels.Color(0, 0, 0)); // Moderately bright green color.
  } else {
    pixels.setPixelColor(gOffset - range, pixels.Color(0, 0, 0)); // Moderately bright green color.
  }
  pixels.setPixelColor(gOffset, pixels.Color(0, 150, 0)); // Moderately bright green color.

  if (roffset > 0) { // we want an offset chase also
    if (rOffset < range)
    {
      pixels.setPixelColor(NUMPIXELS - (range - rOffset), pixels.Color(0, 0, 0)); // Moderately bright green color.
    } else {
      pixels.setPixelColor(rOffset - range, pixels.Color(0, 0, 0)); // Moderately bright green color.
    }
    pixels.setPixelColor(rOffset, pixels.Color(150, 0, 0)); // Moderately bright green color.

  }

  if (boffset > 0) { // we want an offset chase also
    if (bOffset < range)
    {
      pixels.setPixelColor(NUMPIXELS - (range - bOffset), pixels.Color(0, 0, 0)); // Moderately bright green color.
    } else {
      pixels.setPixelColor(bOffset - range, pixels.Color(0, 0, 0)); // Moderately bright green color.
    }
    pixels.setPixelColor(bOffset, pixels.Color(0, 0, 150)); // Moderately bright green color.

  }

  pixels.show(); // This sends the updated pixel color to the hardware.

  if (gOffset++ == NUMPIXELS) {
    gOffset = 0;
  }

  if (roffset > 0) {
    if (rOffset++ == NUMPIXELS) {
      rOffset = 0;
    }
  }

  if (boffset > 0) {
    if (bOffset++ == NUMPIXELS) {
      bOffset = 0;
    }
  }

}

void rainbow() {
  }

void clearLeds() {
  gOffset = goffset;
  rOffset = roffset;
  bOffset = 0;
  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(0, 0, 0)); // Moderately bright green color.
  }
  pixels.show(); // This sends the updated pixel color to the hardware.
}
