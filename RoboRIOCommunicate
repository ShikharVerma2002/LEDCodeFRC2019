// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Wire.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN            6

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      120

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
byte state = 0;
int range = 10;
int goffset = 0;
int roffset = range * 2;
int boffset = roffset + range * 2;
int gOffset = goffset;
int rOffset = roffset;
int bOffset = boffset;

class Strip
{
  public:
    uint8_t   effect;
    uint8_t   effects;
    uint16_t  effStep;
    unsigned long effStart;
    Adafruit_NeoPixel strip;
    Strip(uint16_t leds, uint8_t pin, uint8_t toteffects) : strip(leds, pin, NEO_GRB + NEO_KHZ800) {
      effect = -1;
      effects = toteffects;
      Reset();
    }
    void Reset() {
      effStep = 0;
      effect = (effect + 1) % effects;
      effStart = millis();
    }
};

struct Loop
{
  uint8_t currentChild;
  uint8_t childs;
  bool timeBased;
  uint16_t cycles;
  uint16_t currentTime;
  Loop(uint8_t totchilds, bool timebased, uint16_t tottime) {
    currentTime = 0;
    currentChild = 0;
    childs = totchilds;
    timeBased = timebased;
    cycles = tottime;
  }
};



void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
#if defined (__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
#endif
  // End of trinket special code

  Serial.begin(9600);
  Wire.begin(4);
  Wire.onReceive(receiveEvent);

  pixels.begin(); // This initializes the NeoPixel library.
}



void loop() {

  while (true) {
    if (state < 0x7f) {
      chase();
    } else {
      clearLeds();
    }
    //        switch(state){
    //          case 0 //hatchGripperOn:
    //            clearLeds();
    //            chase();
    //            break;
    //          case 1:
    //            clearLeds();
    //            strips_loop();
    //            break;
    //          default:
    //            clearLeds();
    //            break;
    //        }
    delay(1000); // Delay for a period of time (in milliseconds).
  }

}

void receiveEvent(int howMany) {
  byte thisState = 0;
  while (Wire.available()) {
    thisState = Wire.read();
  }
  Serial.print("old data ");
  Serial.print(state);
  Serial.print(" new data ");
  Serial.println(thisState);
  state = thisState;
}

void chase() {
  // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
  if (gOffset < range)
  {
    pixels.setPixelColor(NUMPIXELS - (range - gOffset), pixels.Color(0, 0, 0)); // Moderately bright green color.
  } else {
    pixels.setPixelColor(gOffset - range, pixels.Color(0, 0, 0)); // Moderately bright green color.
  }
  pixels.setPixelColor(gOffset, pixels.Color(0, 150, 0)); // Moderately bright green color.

  if (roffset > 0) { // we want an offset chase also
    if (rOffset < range)
    {
      pixels.setPixelColor(NUMPIXELS - (range - rOffset), pixels.Color(0, 0, 0)); // Moderately bright green color.
    } else {
      pixels.setPixelColor(rOffset - range, pixels.Color(0, 0, 0)); // Moderately bright green color.
    }
    pixels.setPixelColor(rOffset, pixels.Color(150, 0, 0)); // Moderately bright green color.

  }

  if (boffset > 0) { // we want an offset chase also
    if (bOffset < range)
    {
      pixels.setPixelColor(NUMPIXELS - (range - bOffset), pixels.Color(0, 0, 0)); // Moderately bright green color.
    } else {
      pixels.setPixelColor(bOffset - range, pixels.Color(0, 0, 0)); // Moderately bright green color.
    }
    pixels.setPixelColor(bOffset, pixels.Color(0, 0, 150)); // Moderately bright green color.

  }

  pixels.show(); // This sends the updated pixel color to the hardware.

  if (gOffset++ == NUMPIXELS) {
    gOffset = 0;
  }

  if (roffset > 0) {
    if (rOffset++ == NUMPIXELS) {
      rOffset = 0;
    }
  }

  if (boffset > 0) {
    if (bOffset++ == NUMPIXELS) {
      bOffset = 0;
    }
  }

}

void rainbow() {
  void strips_loop() {
    if (strip0_loop0() & 0x01)
      strip_0.strip.show();
  }

  uint8_t strip0_loop0() {
    uint8_t ret = 0x00;
    switch (strip0loop0.currentChild) {
      case 0:
        ret = strip0_loop0_eff0(); break;
    }
    if (ret & 0x02) {
      ret &= 0xfd;
      if (strip0loop0.currentChild + 1 >= strip0loop0.childs) {
        strip0loop0.currentChild = 0;
        if (++strip0loop0.currentTime >= strip0loop0.cycles) {
          strip0loop0.currentTime = 0;
          ret |= 0x02;
        }
      }
      else {
        strip0loop0.currentChild++;
      }
    };
    return ret;
  }

  uint8_t strip0_loop0_eff0() {
    // Strip ID: 0 - Effect: Rainbow - LEDS: 120
    // Steps: 60 - Delay: 1
    // Colors: 3 (255.0.0, 0.255.0, 0.0.255, )
    // Options: toLeft=false,
    if (millis() - strip_0.effStart < 1 * (strip_0.effStep)) return 0x00;
    float factor1, factor2;
    uint16_t ind;
    for (uint16_t j = 0; j < 120; j++) {
      ind = fmod( (60 - (strip_0.effStep - j * 0.5)), 60);
      switch ((int)((ind % 60) / 20)) {
        case 0: factor1 = 1.0 - ((float)(ind % 60 - 0 * 20) / 20);
          factor2 = (float)((int)(ind - 0) % 60) / 20;
          strip_0.strip.setPixelColor(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
          break;
        case 1: factor1 = 1.0 - ((float)(ind % 60 - 1 * 20) / 20);
          factor2 = (float)((int)(ind - 20) % 60) / 20;
          strip_0.strip.setPixelColor(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
          break;
        case 2: factor1 = 1.0 - ((float)(ind % 60 - 2 * 20) / 20);
          factor2 = (float)((int)(ind - 40) % 60) / 20;
          strip_0.strip.setPixelColor(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
          break;
      }
    }
    if (strip_0.effStep >= 60) {
      strip_0.Reset();
      return 0x03;
    }
    else strip_0.effStep++;
    return 0x01;
  }

}

void clearLeds() {
  gOffset = goffset;
  rOffset = roffset;
  bOffset = 0;
  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(0, 0, 0)); // Moderately bright green color.
  }
  pixels.show(); // This sends the updated pixel color to the hardware.
}
